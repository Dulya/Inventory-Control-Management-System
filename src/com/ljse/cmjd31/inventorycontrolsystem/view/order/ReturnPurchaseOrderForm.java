/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ljse.cmjd31.inventorycontrolsystem.view.order;

import com.ijse.cmjd31.inventorycontrolsystem.controller.ItemController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.PurchaseDetailController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.PurchaseOrderController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.PurchaseReturnController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.PurchaseReturnDetailController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.SupplierController;
import com.ijse.cmjd31.inventorycontrolsystem.model.Item;
import com.ijse.cmjd31.inventorycontrolsystem.model.PurchaseOrder;
import com.ijse.cmjd31.inventorycontrolsystem.model.PurchaseOrderDetail;
import com.ijse.cmjd31.inventorycontrolsystem.model.PurchaseReturnDetail;
import com.ijse.cmjd31.inventorycontrolsystem.model.PurchaseReturns;
import com.ijse.cmjd31.inventorycontrolsystem.model.Supplier;
import com.ijse.cmjd31.inventorycontrolsystem.other.IdGenerator;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 1
 */
public class ReturnPurchaseOrderForm extends javax.swing.JPanel {

    /**
     * Creates new form PurchaseOrderEdit
     */
    private boolean b;
    private DefaultTableModel dtm;
    private DefaultTableModel dtm1;
    private SimpleDateFormat sdf;
    private DefaultTableModel dtm2;

    public ReturnPurchaseOrderForm() throws SQLException {
        initComponents();
        fillSupplierCombo();
        sdf = new SimpleDateFormat("YYYY-MM-dd");
        String date = sdf.format(new Date());
        updateDateText.setText(date);
        String nextId;
        try {
            nextId = IdGenerator.getNextId("PurchaseReturn", "idPurchaseReturn", "R");
            idText.setText(nextId);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReturnPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        supplierCombo = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        processButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        orderDetailTable = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        supplierText = new javax.swing.JTextField();
        dateText = new javax.swing.JTextField();
        returnButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        totalText = new javax.swing.JTextField();
        updateDateText = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        returnTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        returnTotalText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        idText = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(1250, 573));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(1250, 573));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Order By Supplier", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Supplier");

        supplierCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        supplierCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        supplierCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Order From List", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Purchase Order Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderTable.setSelectionBackground(new java.awt.Color(204, 204, 255));
        orderTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        orderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                orderTableMousePressed(evt);
            }
        });
        orderTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                orderTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                orderTableKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(orderTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                .addContainerGap())
        );

        processButton.setText("Process");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Order Detail", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        orderDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Id", "Item Code", "Description", "Cost Price", "ReOrder Qty", "Recieved Qty", "Cost Amount"
            }
        ));
        orderDetailTable.setSelectionBackground(new java.awt.Color(204, 204, 255));
        orderDetailTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane3.setViewportView(orderDetailTable);

        jLabel14.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel14.setText("Supplier");

        jLabel15.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel15.setText("Date");

        supplierText.setEditable(false);
        supplierText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        dateText.setEditable(false);
        dateText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel9.setText("Total Amount");

        totalText.setEditable(false);
        totalText.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(supplierText, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(dateText)
                    .addComponent(totalText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(returnButton)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(supplierText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnButton))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        updateDateText.setEditable(false);
        updateDateText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDateTextActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Date");

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        jLabel1.setFont(new java.awt.Font("Andalus", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Return Purchase Order Form");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 883, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(243, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel1))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Return Detail", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        returnTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Id", "Item Code", "return Qty", "return Amount"
            }
        ));
        returnTable.setSelectionBackground(new java.awt.Color(204, 204, 255));
        returnTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(returnTable);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Baskerville Old Face", 1, 18)); // NOI18N
        jLabel2.setText("Return Total Amount");

        returnTotalText.setEditable(false);
        returnTotalText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnTotalTextActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Return Id");

        idText.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(idText, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                            .addComponent(updateDateText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(returnTotalText, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 47, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(updateDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnTotalText, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void supplierComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboActionPerformed
        if (b) {
            Supplier supplier = (Supplier) supplierCombo.getSelectedItem();
            dtm = (DefaultTableModel) orderTable.getModel();
            dtm.setRowCount(0);
            dtm1 = (DefaultTableModel) orderDetailTable.getModel();
            List<PurchaseOrder> orderIdList;
            try {
                orderIdList = PurchaseOrderController.getMarkedOrderBySupplier(supplier.getSupplierId());
                for (PurchaseOrder order : orderIdList) {
                    Object[] rowData = {order};
                    dtm.addRow(rowData);
                }
                orderTable.requestFocus();
            } catch (SQLException ex) {
                Logger.getLogger(ReturnPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ReturnPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_supplierComboActionPerformed

    private void orderTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderTableKeyPressed
    }//GEN-LAST:event_orderTableKeyPressed

    private void orderTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderTableKeyReleased
        //        if(evt.getKeyCode()== KeyEvent.VK_UP || evt.getKeyCode()==KeyEvent.VK_DOWN){
        //               int row=orderTable.getSelectedRow();
        //
        //
        //
        //       dtm1=(DefaultTableModel)orderDetailTable.getModel();
        //       dtm1.setRowCount(0);
        //       PurchaseOrder purchaseOrder=(PurchaseOrder)orderTable.getValueAt(row, 0);
        //               List<PurchaseOrderDetail> orderDetails;
        //        try {
        //
        //        Supplier supplier=SupplierController.getsupplierNameById(purchaseOrder.getSupplierId());
        //        supplierText.setText(supplier.getSupplierId()+" - "+supplier.getSupplierName());
        //        totalText.setText(Double.toString(purchaseOrder.getTot_amount()));
        //       dateText.setText(purchaseOrder.getPo_date());
        //             orderDetails= PurchaseDetailController.getOrderDetails(purchaseOrder.getpOrderId());
        //            for(PurchaseOrderDetail detail : orderDetails){
        //           Object [] tableRow={detail.getpOrderId(),detail.getItemCode(),detail.getDescription(),detail.getCostPrice(),detail.getQty(),detail.getPodAmount()};
        //           dtm1.addRow(tableRow);
        //
        //
        //       }
        //        } catch (SQLException ex) {
        //            Logger.getLogger(InvoicePayment.class.getName()).log(Level.SEVERE, null, ex);
        //        } catch (ClassNotFoundException ex) {
        //            Logger.getLogger(InvoicePayment.class.getName()).log(Level.SEVERE, null, ex);
        //        }
        //       }
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            int row = orderTable.getSelectedRow();
            dtm1 = (DefaultTableModel) orderDetailTable.getModel();
            dtm1.setRowCount(0);
            PurchaseOrder purchaseOrder = (PurchaseOrder) orderTable.getValueAt(row, 0);
            List<PurchaseOrderDetail> orderDetails;
            try {
                Supplier supplier = SupplierController.getsupplierNameById(purchaseOrder.getSupplierId());
                supplierText.setText(supplier.getSupplierId() + " - " + supplier.getSupplierName());
                totalText.setText(Double.toString(purchaseOrder.getTot_amount()));
                dateText.setText(purchaseOrder.getPo_date());
                orderDetails = PurchaseDetailController.getOrderDetails(purchaseOrder.getpOrderId());
                for (PurchaseOrderDetail detail : orderDetails) {
                    Object[] tableRow = {detail.getpOrderId(), detail.getItemCode(), detail.getDescription(), detail.getCostPrice(), detail.getQty(), detail.getRecievedQty(), detail.getPodAmount()};
                    dtm1.addRow(tableRow);
                }
            } catch (SQLException ex) {
                Logger.getLogger(InvoicePaymentForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InvoicePaymentForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_orderTableKeyReleased

    private void totalTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalTextActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        dtm2 = (DefaultTableModel) returnTable.getModel();
        int count = dtm2.getRowCount();
        if (count > 0) {
            int res3 = JOptionPane.showConfirmDialog(null, "Are you sure you want proceed with purchase returns!", "Confirm", JOptionPane.YES_NO_OPTION);
            if (res3 == 0) {
                String id = idText.getText();
                String date = updateDateText.getText();
                int s = orderTable.getSelectedRow();
                PurchaseOrder purchaseOrder = (PurchaseOrder) orderTable.getValueAt(s, 0);
                double total = Double.parseDouble(returnTotalText.getText());
                List<PurchaseReturnDetail> details = new ArrayList<>();
                for (int i = 0; i < count; i++) {
                    String code = (String) returnTable.getValueAt(i, 1);
                    int qty = (Integer) returnTable.getValueAt(i, 2);
                    double amount = (Double) returnTable.getValueAt(i, 3);
                    PurchaseReturnDetail detail = new PurchaseReturnDetail(code, qty, amount, id, purchaseOrder.getpOrderId());
                    details.add(detail);
                }
                try {
                    int res1 = PurchaseDetailController.UpdaterRecievedItemQty(details);
                } catch (SQLException ex) {
                    Logger.getLogger(ReturnPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ReturnPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                PurchaseReturns purchaseReturns = new PurchaseReturns(id, date, purchaseOrder.getSupplierId(), total, total, purchaseOrder.getpOrderId(), details);
                int res;
                try {
                    res = PurchaseReturnController.addPurchaseReturn(purchaseReturns);
                    if (res > 0) {
                        JOptionPane.showMessageDialog(null, "Item returned Successfuly!");

                    } else {
                        JOptionPane.showMessageDialog(null, "Failed to return Item!");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(ReturnPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ReturnPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Return Table is empty! Please fill Return Table to proceed! ");
        }
    }//GEN-LAST:event_processButtonActionPerformed

    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed

        dtm1 = (DefaultTableModel) orderDetailTable.getModel();
        int count = dtm1.getRowCount();
        if (count > 0) {
            int row = orderDetailTable.getSelectedRow();
            int row1 = orderTable.getSelectedRow();
            boolean bool = orderDetailTable.isRowSelected(row);
            if (bool) {
                PurchaseOrder purchaseOrder = (PurchaseOrder) orderTable.getValueAt(row1, 0);
                String itemCode = (String) orderDetailTable.getValueAt(row, 1);
                int qty = (Integer) orderDetailTable.getValueAt(row, 5);
                String date = updateDateText.getText();
                Item item;
                try {
                    item = ItemController.getItemByItemCode(itemCode);
                    PurchaseReturnForm form = new PurchaseReturnForm(null, b, item, purchaseOrder, date, this, qty);
                    form.setVisible(true);
                    form.setBounds(600, 300, 500, 300);
                } catch (SQLException ex) {
                    Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a row to return!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a purchaseOrder to return Items!");
        }
    }//GEN-LAST:event_returnButtonActionPerformed

    private void updateDateTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDateTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateDateTextActionPerformed

    private void returnTotalTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnTotalTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnTotalTextActionPerformed

    private void orderTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderTableMousePressed
        int row = orderTable.getSelectedRow();
        dtm1 = (DefaultTableModel) orderDetailTable.getModel();
        dtm1.setRowCount(0);
        PurchaseOrder purchaseOrder = (PurchaseOrder) orderTable.getValueAt(row, 0);
        List<PurchaseOrderDetail> orderDetails;
        try {
            Supplier supplier = SupplierController.getsupplierNameById(purchaseOrder.getSupplierId());
            supplierText.setText(supplier.getSupplierId() + " - " + supplier.getSupplierName());
            totalText.setText(Double.toString(purchaseOrder.getTot_amount()));
            dateText.setText(purchaseOrder.getPo_date());
            orderDetails = PurchaseDetailController.getOrderDetails(purchaseOrder.getpOrderId());
            for (PurchaseOrderDetail detail : orderDetails) {
                Object[] tableRow = {detail.getpOrderId(), detail.getItemCode(), detail.getDescription(), detail.getCostPrice(), detail.getQty(), detail.getRecievedQty(), detail.getPodAmount()};
                dtm1.addRow(tableRow);
            }
        } catch (SQLException ex) {
            Logger.getLogger(InvoicePaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InvoicePaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_orderTableMousePressed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dateText;
    private javax.swing.JTextField idText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable orderDetailTable;
    private javax.swing.JTable orderTable;
    private javax.swing.JButton processButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JTable returnTable;
    private javax.swing.JTextField returnTotalText;
    private javax.swing.JComboBox supplierCombo;
    private javax.swing.JTextField supplierText;
    private javax.swing.JTextField totalText;
    private javax.swing.JTextField updateDateText;
    // End of variables declaration//GEN-END:variables

    private void fillSupplierCombo() {
        List<Supplier> supplierList;
        try {
            supplierList = SupplierController.getAllSuppliers();
            b = false;
            supplierCombo.removeAllItems();
            supplierCombo.addItem("<select a Supplier>");
            for (Supplier supplier : supplierList) {
                supplierCombo.addItem(supplier);
            }
            b = true;
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateQty(int qty) throws SQLException {
        int row = orderDetailTable.getSelectedRow();
        int value = (Integer) orderDetailTable.getValueAt(row, 5);
        String id = (String) orderDetailTable.getValueAt(row, 0);
        String code = (String) orderDetailTable.getValueAt(row, 1);
        orderDetailTable.setValueAt(value - qty, row, 5);
        double price1 = (Double) orderDetailTable.getValueAt(row, 3);
        double amount1 = qty * price1;
        dtm2 = (DefaultTableModel) returnTable.getModel();
        Object[] ob = {id, code, qty, amount1};
        dtm2.addRow(ob);
        String itemCode = (String) orderDetailTable.getValueAt(row, 1);
        Item item;
        try {
            item = ItemController.getItemByItemCode(itemCode);
            double price = item.getSalesPrice();
            double amount = price * qty;
            orderDetailTable.setValueAt(amount, row, 6);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        int rowCount = returnTable.getRowCount();
        double returnTotal = 0;
        for (int i = 0; i < rowCount; i++) {
            double total = (Double) returnTable.getValueAt(i, 3);
            returnTotal = returnTotal + total;
        }
        returnTotalText.setText(Double.toString(returnTotal));
    }
}
