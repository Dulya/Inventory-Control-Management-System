/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ljse.cmjd31.inventorycontrolsystem.view.order;

import com.ijse.cmjd31.inventorycontrolsystem.controller.ItemController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.PurchaseDetailController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.PurchaseOrderController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.PurchaseReturnController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.SupplierController;
import com.ijse.cmjd31.inventorycontrolsystem.model.Item;
import com.ijse.cmjd31.inventorycontrolsystem.model.PurchaseOrder;
import com.ijse.cmjd31.inventorycontrolsystem.model.PurchaseOrderDetail;
import com.ijse.cmjd31.inventorycontrolsystem.model.Supplier;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 1
 */
public class EditPurchaseOrderForm extends javax.swing.JPanel {

    /**
     * Creates new form PurchaseOrderEdit
     */
    private boolean b;
    private DefaultTableModel dtm;
    private DefaultTableModel dtm1;
    private SimpleDateFormat sdf;
    private boolean bool;

    public EditPurchaseOrderForm() {
        initComponents();
        fillSupplierCombo();
        sdf = new SimpleDateFormat("YYYY-MM-dd");
        String date = sdf.format(new Date());
        updateDateText.setText(date);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        supplierCombo = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        purchaseCheckBox = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        recievedDateCombo = new org.jdesktop.swingx.JXDatePicker();
        processButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        paymentText = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        startDateCombo = new org.jdesktop.swingx.JXDatePicker();
        jLabel11 = new javax.swing.JLabel();
        endDateCombo = new org.jdesktop.swingx.JXDatePicker();
        jLabel6 = new javax.swing.JLabel();
        balanceText = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        orderDetailTable = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        supplierText = new javax.swing.JTextField();
        dateText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        totalText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        refundText = new javax.swing.JTextField();
        updateDateText = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1250, 573));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(1250, 573));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Order By Supplier", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Supplier");

        supplierCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        supplierCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        supplierCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboActionPerformed(evt);
            }
        });
        supplierCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                supplierComboFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(supplierCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Order From List", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Purchase Order Id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderTable.setSelectionBackground(new java.awt.Color(204, 204, 255));
        orderTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        orderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                orderTableMousePressed(evt);
            }
        });
        orderTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                orderTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                orderTableKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(orderTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                .addContainerGap())
        );

        purchaseCheckBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        purchaseCheckBox.setText("Recieved Purchase Order");
        purchaseCheckBox.setToolTipText("Mark recieved Purchase Order");
        purchaseCheckBox.setEnabled(false);
        purchaseCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseCheckBoxActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        jLabel10.setText("Recieved Date");

        recievedDateCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recievedDateComboActionPerformed(evt);
            }
        });

        processButton.setText("Process");
        processButton.setEnabled(false);
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        jLabel12.setText("Payment");

        jLabel13.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        jLabel13.setText("Due Amount");

        paymentText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        paymentText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentTextActionPerformed(evt);
            }
        });
        paymentText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paymentTextKeyReleased(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Order By Date", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Date");

        startDateCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateComboActionPerformed(evt);
            }
        });

        jLabel11.setBackground(new java.awt.Color(204, 204, 204));
        jLabel11.setForeground(new java.awt.Color(0, 0, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("To");

        endDateCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endDateComboActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Date");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(endDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(endDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel6)
                    .addComponent(startDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        balanceText.setEditable(false);
        balanceText.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Order Detail", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        orderDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Id", "Item Code", "Description", "Cost Price", "ReOrder Qty", "Recieved Qty", "Cost Amount"
            }
        ));
        orderDetailTable.setSelectionBackground(new java.awt.Color(204, 204, 255));
        orderDetailTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane3.setViewportView(orderDetailTable);

        jLabel14.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel14.setText("Supplier");

        jLabel15.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel15.setText("Date");

        supplierText.setEditable(false);
        supplierText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        dateText.setEditable(false);
        dateText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel9.setText("Total Amount");

        totalText.setEditable(false);
        totalText.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalTextActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Andalus", 1, 18)); // NOI18N
        jLabel2.setText("Refund Amount");

        refundText.setEditable(false);
        refundText.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        refundText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refundTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(totalText, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(dateText)
                    .addComponent(supplierText)
                    .addComponent(refundText))
                .addGap(57, 57, 57))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(supplierText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateText))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(totalText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(refundText))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        updateDateText.setEditable(false);
        updateDateText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDateTextActionPerformed(evt);
            }
        });

        jLabel16.setText("Date");

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        jLabel1.setFont(new java.awt.Font("Andalus", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Edit Purchase Order Form");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 961, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(239, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel1)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(52, 52, 52)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(paymentText, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(balanceText, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(191, 191, 191)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(purchaseCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(29, 29, 29)
                                                .addComponent(recievedDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(63, 63, 63)
                                .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(162, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(updateDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(160, 160, 160))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(updateDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel16))
                            .addGap(18, 18, 18)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(purchaseCheckBox)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(recievedDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(balanceText, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paymentText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(13, 13, 13))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void supplierComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboActionPerformed

        if (b) {
            int index = supplierCombo.getSelectedIndex();
            if (index == 0) {
                dtm = (DefaultTableModel) orderTable.getModel();
                dtm.setRowCount(0);
            } else {
                Supplier supplier = (Supplier) supplierCombo.getSelectedItem();
                dtm = (DefaultTableModel) orderTable.getModel();
                dtm.setRowCount(0);
                dtm1 = (DefaultTableModel) orderDetailTable.getModel();
                dtm1.setRowCount(0);
                balanceText.setText("");
                paymentText.setText("");
                supplierText.setText("");
                dateText.setText("");
                totalText.setText("");
                refundText.setText("");
                List<PurchaseOrder> orderIdList;
                try {
                    orderIdList = PurchaseOrderController.getOrderBySupplier(supplier.getSupplierId());
                    for (PurchaseOrder order : orderIdList) {
                        Object[] rowData = {order};
                        dtm.addRow(rowData);
                    }
                    orderTable.requestFocus();
                } catch (SQLException ex) {
                    Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_supplierComboActionPerformed

    private void orderTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderTableKeyPressed
        checkTable();
    }//GEN-LAST:event_orderTableKeyPressed

    private void orderTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderTableKeyReleased
        //        if(evt.getKeyCode()== KeyEvent.VK_UP || evt.getKeyCode()==KeyEvent.VK_DOWN){
        //               int row=orderTable.getSelectedRow();
        //
        //
        //
        //       dtm1=(DefaultTableModel)orderDetailTable.getModel();
        //       dtm1.setRowCount(0);
        //       PurchaseOrder purchaseOrder=(PurchaseOrder)orderTable.getValueAt(row, 0);
        //               List<PurchaseOrderDetail> orderDetails;
        //        try {
        //
        //        Supplier supplier=SupplierController.getsupplierNameById(purchaseOrder.getSupplierId());
        //        supplierText.setText(supplier.getSupplierId()+" - "+supplier.getSupplierName());
        //        totalText.setText(Double.toString(purchaseOrder.getTot_amount()));
        //       dateText.setText(purchaseOrder.getPo_date());
        //             orderDetails= PurchaseDetailController.getOrderDetails(purchaseOrder.getpOrderId());
        //            for(PurchaseOrderDetail detail : orderDetails){
        //           Object [] tableRow={detail.getpOrderId(),detail.getItemCode(),detail.getDescription(),detail.getCostPrice(),detail.getQty(),detail.getPodAmount()};
        //           dtm1.addRow(tableRow);
        //
        //
        //       }
        //        } catch (SQLException ex) {
        //            Logger.getLogger(InvoicePayment.class.getName()).log(Level.SEVERE, null, ex);
        //        } catch (ClassNotFoundException ex) {
        //            Logger.getLogger(InvoicePayment.class.getName()).log(Level.SEVERE, null, ex);
        //        }
        //       }
        checkTable();
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            int row = orderTable.getSelectedRow();
            dtm1 = (DefaultTableModel) orderDetailTable.getModel();
            dtm1.setRowCount(0);
            PurchaseOrder purchaseOrder = (PurchaseOrder) orderTable.getValueAt(row, 0);
            try {
                bool = PurchaseOrderController.checkRecievedOrder(purchaseOrder.getpOrderId());
            } catch (SQLException ex) {
                Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            List<PurchaseOrderDetail> orderDetails;
            try {
                if (bool == true) {
                    double refundAmount = PurchaseReturnController.getRefundAmount(purchaseOrder.getpOrderId());
                    refundText.setText(Double.toString(refundAmount));
                    Supplier supplier = SupplierController.getsupplierNameById(purchaseOrder.getSupplierId());
                    supplierText.setText(supplier.getSupplierId() + " - " + supplier.getSupplierName());
                    totalText.setText(Double.toString(purchaseOrder.getTot_amount()));
                    dateText.setText(purchaseOrder.getPo_date());
                    paymentText.setText("");
                    orderDetails = PurchaseDetailController.getOrderDetails(purchaseOrder.getpOrderId());
                    for (PurchaseOrderDetail detail : orderDetails) {
                        Object[] tableRow = {detail.getpOrderId(), detail.getItemCode(), detail.getDescription(), detail.getCostPrice(), detail.getQty(), detail.getRecievedQty(), detail.getPodAmount()};
                        dtm1.addRow(tableRow);
                        paymentText.requestFocus();
                    }
                    orderDetailTable.setEnabled(false);
                    String date = purchaseOrder.getRecievedDate();
                    System.out.println("A");
                    purchaseCheckBox.setSelected(true);
                    recievedDateCombo.setEditable(false);
                    System.out.println(date);
                    recievedDateCombo.setDate(sdf.parse(date));
                    recievedDateCombo.setEditable(false);
                    double balance = purchaseOrder.getBalance();
                    balanceText.setText(Double.toString(balance));
                    if (refundAmount > 0) {
                        int response = JOptionPane.showConfirmDialog(null, "Do you want to pay from refund Amount?", "Confirm", JOptionPane.YES_NO_OPTION);
                        if (response == 0) {
                            if (balance >= refundAmount) {
                                System.out.println("A");
                                double newBalance = balance - refundAmount;
                                balanceText.setText(Double.toString(newBalance));
                                refundText.setText("0");
                                paymentText.requestFocus();
                            } else {
                                double refund = refundAmount - balance;
                                System.out.println("B");
                                refundText.setText(Double.toString(refund));
                                balanceText.setText("0");
                                paymentText.requestFocus();
                            }
                        }
                    }
                } else {
                    Supplier supplier = SupplierController.getsupplierNameById(purchaseOrder.getSupplierId());
                    supplierText.setText(supplier.getSupplierId() + " - " + supplier.getSupplierName());
                    totalText.setText(Double.toString(purchaseOrder.getTot_amount()));
                    dateText.setText(purchaseOrder.getPo_date());
                    orderDetails = PurchaseDetailController.getOrderDetails(purchaseOrder.getpOrderId());
                    for (PurchaseOrderDetail detail : orderDetails) {
                        Object[] tableRow = {detail.getpOrderId(), detail.getItemCode(), detail.getDescription(), detail.getCostPrice(), detail.getQty(), null, detail.getPodAmount()};
                        dtm1.addRow(tableRow);
                    }
                    double balance = purchaseOrder.getBalance();
                    balanceText.setText(Double.toString(balance));
                    refundText.setText("");
                    refundText.setEnabled(false);
                    paymentText.requestFocus();
                    purchaseCheckBox.setSelected(false);
                }
            } catch (SQLException ex) {
                Logger.getLogger(InvoicePaymentForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(InvoicePaymentForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_orderTableKeyReleased

    private void totalTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalTextActionPerformed

    private void purchaseCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseCheckBoxActionPerformed
        dtm1 = (DefaultTableModel) orderDetailTable.getModel();
        int count = orderDetailTable.getRowCount();
        String msg = "Please Enter Recieved Item Qty for ";
        boolean bool = true;
        for (int i = 0; i < count; i++) {
            Object ob = orderDetailTable.getValueAt(i, 5);
            if (ob == null) {
                String code = (String) orderDetailTable.getValueAt(i, 1);
                msg = msg + " " + code + ",";
                bool = false;
            }
        }
        if (bool == false) {
            msg = msg.substring(0, msg.length() - 1) + ".";
            JOptionPane.showMessageDialog(this, msg);
        }
    }//GEN-LAST:event_purchaseCheckBoxActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        boolean b = purchaseCheckBox.isSelected();
        if (bool == true && b) {
            int row = orderTable.getSelectedRow();
            PurchaseOrder purchaseOrder = (PurchaseOrder) orderTable.getValueAt(row, 0);
            double dueAmount = Double.parseDouble(balanceText.getText());
            double payment = Double.parseDouble(paymentText.getText());
            double balance = dueAmount - payment;
            double refundAmount = Double.parseDouble(refundText.getText());
            try {
                int res1 = PurchaseReturnController.updateRefundAmount(refundAmount, purchaseOrder.getpOrderId());
            } catch (SQLException ex) {
                Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            int res;
            try {
                res = PurchaseOrderController.updateBalance(balance, purchaseOrder.getpOrderId());
                if (res > 0) {
                    JOptionPane.showMessageDialog(null, "Paid Successfully");
                    balanceText.setText(Double.toString(balance));
                    processButton.setEnabled(false);
                    dtm1 = (DefaultTableModel) orderDetailTable.getModel();
                    dtm = (DefaultTableModel) orderTable.getModel();
                    dtm.setRowCount(0);
                    dtm1.setRowCount(0);
                    balanceText.setText("");
                    paymentText.setText("");
                    supplierText.setText("");
                    dateText.setText("");
                    totalText.setText("");
                    refundText.setText("");
                }
            } catch (SQLException ex) {
                Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (bool != true && b) {
            int row = orderTable.getSelectedRow();
            if (paymentText.getText().isEmpty()) {
                ///mark recieved date
                Date recievedDate = recievedDateCombo.getDate();
                sdf = new SimpleDateFormat("YYYY-MM-dd");
                String date = sdf.format(recievedDate);
                ////edit itemQty
                int count = orderDetailTable.getRowCount();
                List<PurchaseOrderDetail> list = new ArrayList<>();
                for (int i = 0; i < count; i++) {
                    String qty1 = (String) orderDetailTable.getValueAt(i, 5);
                    //double qty=Double.parseDouble(qty1);
                    String itemCode = (String) orderDetailTable.getValueAt(i, 1);
                    String orderId = (String) orderDetailTable.getValueAt(i, 0);
                    PurchaseOrderDetail detail = new PurchaseOrderDetail(orderId, itemCode, Integer.parseInt(qty1));
                    list.add(detail);
                }
                PurchaseOrder purchaseOrder = (PurchaseOrder) orderTable.getValueAt(row, 0);
                try {
                    int response = PurchaseOrderController.markRecievedDate(date, purchaseOrder.getpOrderId());
                    int response1 = PurchaseDetailController.UpdatePurchaseItemQty(list);
                    int response2 = PurchaseDetailController.markRecievedItemQty(list);
                    if (response > 0 && response1 > 0) {
                        JOptionPane.showMessageDialog(null, "Record Added Successfully!");
                        dtm1 = (DefaultTableModel) orderDetailTable.getModel();
                        dtm = (DefaultTableModel) orderTable.getModel();
                        dtm.setRowCount(0);
                        dtm1.setRowCount(0);
                        balanceText.setText("");
                        paymentText.setText("");
                        supplierText.setText("");
                        dateText.setText("");
                        totalText.setText("");
                        refundText.setText("");
                        processButton.setEnabled(false);
                    } else {
                        JOptionPane.showMessageDialog(null, "Failed to add Record!");
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                ////update balance
                PurchaseOrder purchaseOrder = (PurchaseOrder) orderTable.getValueAt(row, 0);
                double dueAmount = Double.parseDouble(balanceText.getText());
                double payment = Double.parseDouble(paymentText.getText());
                double balance = dueAmount - payment;
                int res;
                try {
                    res = PurchaseOrderController.updateBalance(balance, purchaseOrder.getpOrderId());
                    if (res > 0) {
                        JOptionPane.showMessageDialog(null, "Paid Successfully");
                        dtm1 = (DefaultTableModel) orderDetailTable.getModel();
                        dtm = (DefaultTableModel) orderTable.getModel();
                        dtm.setRowCount(0);
                        dtm1.setRowCount(0);
                        balanceText.setText("");
                        paymentText.setText("");
                        supplierText.setText("");
                        dateText.setText("");
                        totalText.setText("");
                        refundText.setText("");
                        balanceText.setText(Double.toString(balance));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                ///mark recieved date
                Date recievedDate = recievedDateCombo.getDate();
                sdf = new SimpleDateFormat("YYYY-MM-dd");
                String date = sdf.format(recievedDate);
                ////edit itemQty
                int count = orderDetailTable.getRowCount();
                List<PurchaseOrderDetail> list = new ArrayList<>();
                for (int i = 0; i < count; i++) {
                    String qty1 = (String) orderDetailTable.getValueAt(i, 5);
                    //double qty=Double.parseDouble(qty1);
                    String itemCode = (String) orderDetailTable.getValueAt(i, 1);
                    String orderId = (String) orderDetailTable.getValueAt(i, 0);
                    PurchaseOrderDetail detail = new PurchaseOrderDetail(orderId, itemCode, Integer.parseInt(qty1));
                    list.add(detail);
                }
                try {
                    int response = PurchaseOrderController.markRecievedDate(date, purchaseOrder.getpOrderId());
                    int response1 = PurchaseDetailController.UpdatePurchaseItemQty(list);
                    int response2 = PurchaseDetailController.markRecievedItemQty(list);
                    System.out.println("B");
                } catch (SQLException ex) {
                    Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            int row = orderTable.getSelectedRow();
            ////update balance
            PurchaseOrder purchaseOrder = (PurchaseOrder) orderTable.getValueAt(row, 0);
            double dueAmount = Double.parseDouble(balanceText.getText());
            double payment = Double.parseDouble(paymentText.getText());
            double balance = dueAmount - payment;
            int res;
            try {
                res = PurchaseOrderController.updateBalance(balance, purchaseOrder.getpOrderId());

                if (res > 0) {
                    JOptionPane.showMessageDialog(null, "Paid Successfully");
                    balanceText.setText(Double.toString(balance));
                }
            } catch (SQLException ex) {
                Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_processButtonActionPerformed

    private void paymentTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paymentTextActionPerformed

    private void startDateComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDateComboActionPerformed
        jPanel3.setBackground(Color.lightGray);
        jPanel5.setBackground(Color.WHITE);
        Date date = startDateCombo.getDate();
        String d = new SimpleDateFormat("YY-MM-dd").format(date);
        dtm = (DefaultTableModel) orderTable.getModel();
        List<PurchaseOrder> orderList;
        try {
            orderList = PurchaseOrderController.getOrderByStartDate(d);
            for (PurchaseOrder order : orderList) {
                Object[] row = {order};
                dtm.addRow(row);
            }
            orderTable.requestFocus();
        } catch (SQLException ex) {
            Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startDateComboActionPerformed

    private void endDateComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endDateComboActionPerformed
        Date date = endDateCombo.getDate();
        Date date1 = startDateCombo.getDate();
        String endDate = new SimpleDateFormat("YY=MM-dd").format(date);
        String startDate = new SimpleDateFormat("YY-MM-dd").format(date1);
        List<PurchaseOrder> orderList;
        try {
            orderList = PurchaseOrderController.getOrderByDateRange(startDate, endDate);
            dtm = (DefaultTableModel) orderTable.getModel();
            dtm.setRowCount(0);
            for (PurchaseOrder order : orderList) {
                Object[] row = {order};
                dtm.addRow(row);
            }
            orderTable.requestFocus();
        } catch (SQLException ex) {
            Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_endDateComboActionPerformed

    private void updateDateTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDateTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateDateTextActionPerformed

    private void refundTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refundTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refundTextActionPerformed

    private void orderTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderTableMousePressed
        checkTable();
        int row = orderTable.getSelectedRow();
        dtm1 = (DefaultTableModel) orderDetailTable.getModel();
        dtm1.setRowCount(0);
        PurchaseOrder purchaseOrder = (PurchaseOrder) orderTable.getValueAt(row, 0);
        try {
            bool = PurchaseOrderController.checkRecievedOrder(purchaseOrder.getpOrderId());
        } catch (SQLException ex) {
            Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        List<PurchaseOrderDetail> orderDetails;
        try {

            if (bool == true) {
                double refundAmount = PurchaseReturnController.getRefundAmount(purchaseOrder.getpOrderId());
                refundText.setText(Double.toString(refundAmount));
                Supplier supplier = SupplierController.getsupplierNameById(purchaseOrder.getSupplierId());
                supplierText.setText(supplier.getSupplierId() + " - " + supplier.getSupplierName());
                totalText.setText(Double.toString(purchaseOrder.getTot_amount()));
                dateText.setText(purchaseOrder.getPo_date());
                paymentText.setText("");
                orderDetails = PurchaseDetailController.getOrderDetails(purchaseOrder.getpOrderId());
                for (PurchaseOrderDetail detail : orderDetails) {
                    Object[] tableRow = {detail.getpOrderId(), detail.getItemCode(), detail.getDescription(), detail.getCostPrice(), detail.getQty(), detail.getRecievedQty(), detail.getPodAmount()};
                    dtm1.addRow(tableRow);
                    paymentText.requestFocus();
                }
                orderDetailTable.setEnabled(false);
                String date = purchaseOrder.getRecievedDate();
                System.out.println("A");
                purchaseCheckBox.setSelected(true);
                System.out.println(date);
                recievedDateCombo.setDate(sdf.parse(date));
                recievedDateCombo.setEditable(false);
                double balance = purchaseOrder.getBalance();
                balanceText.setText(Double.toString(balance));
                if (refundAmount > 0) {
                    int response = JOptionPane.showConfirmDialog(null, "Do you want to pay from refund Amount?", "Confirm", JOptionPane.YES_NO_OPTION);
                    if (response == 0) {
                        if (balance >= refundAmount) {
                            System.out.println("A");
                            double newBalance = balance - refundAmount;
                            balanceText.setText(Double.toString(newBalance));
                            refundText.setText("0");
                            paymentText.requestFocus();
                        } else {
                            double refund = refundAmount - balance;
                            System.out.println("B");
                            refundText.setText(Double.toString(refund));
                            balanceText.setText("0");
                            paymentText.requestFocus();
                        }
                    }
                }
            } else {
                Supplier supplier = SupplierController.getsupplierNameById(purchaseOrder.getSupplierId());
                supplierText.setText(supplier.getSupplierId() + " - " + supplier.getSupplierName());
                totalText.setText(Double.toString(purchaseOrder.getTot_amount()));
                dateText.setText(purchaseOrder.getPo_date());
                orderDetails = PurchaseDetailController.getOrderDetails(purchaseOrder.getpOrderId());
                for (PurchaseOrderDetail detail : orderDetails) {
                    Object[] tableRow = {detail.getpOrderId(), detail.getItemCode(), detail.getDescription(), detail.getCostPrice(), detail.getQty(), null, detail.getPodAmount()};
                    dtm1.addRow(tableRow);
                }
                double balance = purchaseOrder.getBalance();
                balanceText.setText(Double.toString(balance));
                refundText.setText("");
                refundText.setEnabled(false);
                paymentText.requestFocus();
                purchaseCheckBox.setSelected(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(InvoicePaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InvoicePaymentForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(EditPurchaseOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_orderTableMousePressed

    private void recievedDateComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recievedDateComboActionPerformed
        if (purchaseCheckBox.isSelected()) {
            processButton.setEnabled(true);
        }
    }//GEN-LAST:event_recievedDateComboActionPerformed

    private void paymentTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentTextKeyReleased
        check();
//        String txt = paymentText.getText();
//        double q = Double.parseDouble(txt);
//        String text = balanceText.getText();
//        double r = Double.parseDouble(text);
//        if (txt.length() > 0) {
//            if (txt.matches("[0-9]+[.]?[0-9]{0,2}")) {
//                if (r >= q && q != 0) {
//                    paymentText.setText(txt);
//                } else {
//                    paymentText.setText(txt.substring(0, txt.length() - 1));
//                }
//            } else {
//                paymentText.setText(txt.substring(0, txt.length() - 1));
//            }
//        }

        String text = paymentText.getText();
        boolean res = text.matches("[0-9]+[.]?[0-9]{0,2}");
        if (res) {
            paymentText.setText(text);
        } else {
            paymentText.setText(text.substring(0, text.length() - 1));
        }
    }//GEN-LAST:event_paymentTextKeyReleased

    private void supplierComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_supplierComboFocusGained
        jPanel5.setBackground(Color.lightGray);
        jPanel3.setBackground(Color.WHITE);
        startDateCombo.setDate(null);
        endDateCombo.setDate(null);
    }//GEN-LAST:event_supplierComboFocusGained
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField balanceText;
    private javax.swing.JTextField dateText;
    private org.jdesktop.swingx.JXDatePicker endDateCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable orderDetailTable;
    private javax.swing.JTable orderTable;
    private javax.swing.JTextField paymentText;
    private javax.swing.JButton processButton;
    private javax.swing.JCheckBox purchaseCheckBox;
    private org.jdesktop.swingx.JXDatePicker recievedDateCombo;
    private javax.swing.JTextField refundText;
    private org.jdesktop.swingx.JXDatePicker startDateCombo;
    private javax.swing.JComboBox supplierCombo;
    private javax.swing.JTextField supplierText;
    private javax.swing.JTextField totalText;
    private javax.swing.JTextField updateDateText;
    // End of variables declaration//GEN-END:variables

    private void fillSupplierCombo() {
        List<Supplier> supplierList;
        try {
            supplierList = SupplierController.getAllSuppliers();
            b = false;
            supplierCombo.removeAllItems();
            supplierCombo.addItem("<select a Supplier>");
            for (Supplier supplier : supplierList) {
                supplierCombo.addItem(supplier);
            }
            b = true;
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateQty(int qty) throws SQLException {
        int row = orderDetailTable.getSelectedRow();
        orderDetailTable.setValueAt(qty, row, 5);
        String itemCode = (String) orderDetailTable.getValueAt(row, 1);
        Item item;
        try {
            item = ItemController.getItemByItemCode(itemCode);
            double price = item.getSalesPrice();
            double amount = price * qty;
            orderDetailTable.setValueAt(amount, row, 6);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void check() {
        boolean bool = balanceText.getText().isEmpty() || paymentText.getText().isEmpty();
        if (bool == false) {
            processButton.setEnabled(true);
        } else {
            processButton.setEnabled(false);
        }
    }

    public void checkTable() {
        dtm = (DefaultTableModel) orderTable.getModel();
        int row = orderTable.getSelectedRow();
        if (orderTable.isRowSelected(row)) {
            recievedDateCombo.setEnabled(true);
            purchaseCheckBox.setEnabled(true);
        } else {
            recievedDateCombo.setEnabled(false);
            purchaseCheckBox.setEnabled(false);
        }
    }
}
