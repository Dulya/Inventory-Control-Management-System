/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ljse.cmjd31.inventorycontrolsystem.view.order;

import com.ijse.cmjd31.inventorycontrolsystem.controller.BookController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.CustomerController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.InvoiceController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.InvoiceDetailController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.ItemController;
import com.ijse.cmjd31.inventorycontrolsystem.model.Book_Item;
import com.ijse.cmjd31.inventorycontrolsystem.model.Customer;
import com.ijse.cmjd31.inventorycontrolsystem.model.Invoice;
import com.ijse.cmjd31.inventorycontrolsystem.model.InvoiceDetails;
import com.ijse.cmjd31.inventorycontrolsystem.model.Item;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 1
 */
public class UpdateInvoiceForm extends javax.swing.JPanel {

    /**
     * Creates new form InvoiceUpdate
     */
    private boolean b;
    private DefaultTableModel dtm;
    private DefaultTableModel dtm1;
    private int cell;
    
    public UpdateInvoiceForm() {
        initComponents();
        fillCustomerCombo();
        qtyText.requestFocus();
        try {
            fillItemCombo();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        removeButton.setMnemonic('C');
        SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-dd");
        String date = sdf.format(new Date());
        updateDateText.setText(date);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        customerCombo = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        invoiceTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        invoiceDetailTable = new javax.swing.JTable();
        addNewButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        dateText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        customerText = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        dueAmountText = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        totalAmountText = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        endDateCombo = new org.jdesktop.swingx.JXDatePicker();
        startDateCombo = new org.jdesktop.swingx.JXDatePicker();
        jPanel8 = new javax.swing.JPanel();
        itemCombo = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        descriptionText = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        priceText = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        qtyOnHandText = new javax.swing.JTextField();
        qtyText = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        newTotAmountText = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        newDueAmountText = new javax.swing.JTextField();
        processButton = new javax.swing.JButton();
        updateDateText = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setToolTipText("\n");

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Invoice By Customer", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Customer");

        customerCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        customerCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        customerCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                customerComboMousePressed(evt);
            }
        });
        customerCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerComboActionPerformed(evt);
            }
        });
        customerCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerComboFocusGained(evt);
            }
        });
        customerCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerComboKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(customerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerCombo))
                .addGap(12, 12, 12))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Invoice", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        invoiceTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        invoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoiceTable.setSelectionBackground(new java.awt.Color(204, 204, 255));
        invoiceTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        invoiceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                invoiceTableMousePressed(evt);
            }
        });
        invoiceTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                invoiceTableFocusGained(evt);
            }
        });
        invoiceTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                invoiceTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(invoiceTable);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Invoice Details", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        invoiceDetailTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        invoiceDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice Id", "ItemCode", "Descrption", "sales Price", "Qty", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoiceDetailTable.setSelectionBackground(new java.awt.Color(204, 204, 255));
        invoiceDetailTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        invoiceDetailTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                invoiceDetailTableKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(invoiceDetailTable);

        addNewButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addNewButton.setText("Add New - F4");
        addNewButton.setToolTipText("Press F4 to add New Item.");
        addNewButton.setEnabled(false);
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Invoice Date");

        dateText.setEditable(false);
        dateText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Customer");

        customerText.setEditable(false);
        customerText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        customerText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerTextActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Total Amount");

        removeButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        removeButton.setText("Remove - F1");
        removeButton.setToolTipText("press F1 to remove  Item.");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Due Amount");

        dueAmountText.setEditable(false);
        dueAmountText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        updateButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        updateButton.setText("Return");
        updateButton.setToolTipText("press F2 to update  Item.");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        totalAmountText.setEditable(false);
        totalAmountText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                .addGap(42, 42, 42)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalAmountText, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                            .addComponent(dueAmountText)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerText, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(43, 43, 43)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(updateButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addNewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(customerText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(totalAmountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(dueAmountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(addNewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateButton)
                        .addGap(26, 26, 26)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Invoice By Date", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("To");

        endDateCombo.setEnabled(false);
        endDateCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endDateComboActionPerformed(evt);
            }
        });

        startDateCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateComboActionPerformed(evt);
            }
        });
        startDateCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                startDateComboFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(23, 23, 23)
                .addComponent(endDateCombo, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endDateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add New", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        itemCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        itemCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        itemCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemComboActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Item");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Description");

        descriptionText.setEditable(false);
        descriptionText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        descriptionText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                descriptionTextKeyReleased(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Sales Price");

        priceText.setEditable(false);
        priceText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        priceText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                priceTextKeyReleased(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Qty On Hand");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("Qty");

        qtyOnHandText.setEditable(false);
        qtyOnHandText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        qtyOnHandText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyOnHandTextActionPerformed(evt);
            }
        });
        qtyOnHandText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtyOnHandTextKeyReleased(evt);
            }
        });

        qtyText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        qtyText.setEnabled(false);
        qtyText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyTextActionPerformed(evt);
            }
        });
        qtyText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtyTextKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descriptionText, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(qtyText, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                            .addComponent(qtyOnHandText)))
                    .addComponent(itemCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptionText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(qtyOnHandText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(qtyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(24, 24, 24))
        );

        jLabel7.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 102));
        jLabel7.setText("New Total Amount");

        newTotAmountText.setEditable(false);
        newTotAmountText.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        newTotAmountText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTotAmountTextActionPerformed(evt);
            }
        });
        newTotAmountText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                newTotAmountTextKeyReleased(evt);
            }
        });

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/dialog-ok-apply-4.png"))); // NOI18N
        okButton.setEnabled(false);
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 51, 102));
        jLabel11.setText("New Due Amount");

        newDueAmountText.setEditable(false);
        newDueAmountText.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        newDueAmountText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDueAmountTextActionPerformed(evt);
            }
        });
        newDueAmountText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                newDueAmountTextKeyReleased(evt);
            }
        });

        processButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        processButton.setText("Process");
        processButton.setEnabled(false);
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        updateDateText.setEditable(false);

        jLabel18.setText("Date");

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        jLabel19.setBackground(new java.awt.Color(255, 255, 255));
        jLabel19.setFont(new java.awt.Font("Baskerville Old Face", 1, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Update Invoice Form");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 1073, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 118, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(newDueAmountText, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(newTotAmountText, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(38, 38, 38))))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateDateText, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49))))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(updateDateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(okButton)
                            .addComponent(jLabel7)
                            .addComponent(newTotAmountText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(newDueAmountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(29, 29, 29))
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(367, 367, 367))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void customerComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerComboActionPerformed
        checkProcess();
        if (b) {
            Customer customer = (Customer) customerCombo.getSelectedItem();
            dateText.setText("");
            customerText.setText("");
            totalAmountText.setText("");
            dueAmountText.setText("");
            descriptionText.setText("");
            qtyText.setText("");
            priceText.setText("");
            qtyOnHandText.setText("");
            newTotAmountText.setText("");
            newDueAmountText.setText("");
            dtm = (DefaultTableModel) invoiceTable.getModel();
            dtm.setRowCount(0);
            dtm1 = (DefaultTableModel) invoiceDetailTable.getModel();
            dtm1.setRowCount(0);
            List<Invoice> invoiceIdList;
            try {
                invoiceIdList = InvoiceController.getInvoiceByCustomer(customer.getCustId());
                for (Invoice invoice : invoiceIdList) {
                    Object[] rowData = {invoice};
                    dtm.addRow(rowData);
                }
                invoiceTable.requestFocus();
            } catch (SQLException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_customerComboActionPerformed
    
    private void customerComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerComboKeyPressed
//        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
//            Customer customer = (Customer) customerCombo.getSelectedItem();
//
//            dtm = (DefaultTableModel) invoiceTable.getModel();
//            dtm.setRowCount(0);
//            dtm1=(DefaultTableModel)invoiceDetailTable.getModel();
//
//            List<Invoice> invoiceIdList;
//            try {
//                invoiceIdList = InvoiceController.getInvoiceByCustomer(customer.getCustId());
//                for (Invoice invoice : invoiceIdList) {
//                    Object[] rowData = {invoice};
//
//                    dtm.addRow(rowData);
//
//                }
//                invoiceTable.requestFocus();
//            } catch (SQLException ex) {
//                Logger.getLogger(UpdateInvoice.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (ClassNotFoundException ex) {
//                Logger.getLogger(UpdateInvoice.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        }
    }//GEN-LAST:event_customerComboKeyPressed
    
    private void invoiceTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_invoiceTableFocusGained
        //        cashText.setText("");
        //        paymentText.setText("");
        //        balanceText.setText("");
        //        changeText.setText("");
    }//GEN-LAST:event_invoiceTableFocusGained
    
    private void invoiceTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_invoiceTableKeyReleased
        //        if(evt.getKeyCode()== KeyEvent.VK_SPACE){
        //            viewButton.requestFocus();
        //            viewButton.doClick();
        //        }
        checkProcess();
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            int row = invoiceTable.getSelectedRow();
            dtm1 = (DefaultTableModel) invoiceDetailTable.getModel();
            dtm1.setRowCount(0);
            Invoice invoice = (Invoice) invoiceTable.getValueAt(row, 0);
            dateText.setText(invoice.getInv_date());
            Customer customer;
            try {
                customer = CustomerController.getCustomerByCustId(invoice.getCustId());
                customerText.setText(customer.getCustId() + " - " + customer.getCustName());
                totalAmountText.setText(Double.toString(invoice.getTot_amount()));
                dueAmountText.setText(Double.toString(invoice.getBalance()));
            } catch (SQLException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            List<InvoiceDetails> invoiceDetails;
            try {
                invoiceDetails = InvoiceDetailController.getInvoiceDetails(invoice.getInvoiceId());
                for (InvoiceDetails detail : invoiceDetails) {
                    Object[] tableRow = {detail.getInvoiceId(), detail.getItemCode(), detail.getDescription(), detail.getSalesPrice(), detail.getQty(), detail.getItemAmount()};
                    dtm1.addRow(tableRow);
                }
            } catch (SQLException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            int row = invoiceTable.getSelectedRow();
            dtm1 = (DefaultTableModel) invoiceDetailTable.getModel();
            dtm1.setRowCount(0);
            Invoice invoice = (Invoice) invoiceTable.getValueAt(row, 0);
            List<InvoiceDetails> invoiceDetails;
            try {
                dateText.setText(invoice.getInv_date());
                Customer customer = CustomerController.getCustomerByCustId(invoice.getCustId());
                customerText.setText(customer.getCustId() + " - " + customer.getCustName());
                totalAmountText.setText(Double.toString(invoice.getTot_amount()));
                dueAmountText.setText(Double.toString(invoice.getBalance()));
                invoiceDetails = InvoiceDetailController.getInvoiceDetails(invoice.getInvoiceId());
                for (InvoiceDetails detail : invoiceDetails) {
                    Object[] tableRow = {detail.getInvoiceId(), detail.getItemCode(), detail.getDescription(), detail.getSalesPrice(), detail.getQty(), detail.getItemAmount()};
                    dtm1.addRow(tableRow);
                    invoiceDetailTable.requestFocus();
                    int count = invoiceDetailTable.getRowCount();
                }
            } catch (SQLException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_invoiceTableKeyReleased
    
    private void invoiceDetailTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_invoiceDetailTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            removeButton.doClick();
        }
        if (evt.getKeyCode() == KeyEvent.VK_F2) {
            updateButton.doClick();
        }
    }//GEN-LAST:event_invoiceDetailTableKeyReleased
    
    private void addNewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewButtonActionPerformed
        if (b) {
            Object selectedItem = itemCombo.getSelectedItem();
            if (selectedItem instanceof Book_Item) {
                dtm = (DefaultTableModel) invoiceDetailTable.getModel();
                Book_Item bookItem = (Book_Item) itemCombo.getSelectedItem();
                Item item;
                try {
                    item = ItemController.getItemByItemCode(bookItem.getItemCode());
                    boolean isExist = false;
                    cell = -1;
                    for (int i = 0; i < invoiceDetailTable.getRowCount(); i++) {
                        if (invoiceDetailTable.getValueAt(i, 1).equals(item.getItemCode())) {
                            isExist = true;
                            cell = i;
                            break;
                        }
                    }
                    if (!isExist) {
                        int a = Integer.parseInt(qtyText.getText());
                        double price = Double.parseDouble(priceText.getText());
                        int qty = Integer.parseInt(qtyText.getText());
                        double amount = (a * price);
                        if (qtyText.getText().isEmpty() || a <= 0) {
                            JOptionPane.showMessageDialog(UpdateInvoiceForm.this, "Please add item qty");
                        } else {
                            int row = invoiceTable.getSelectedRow();
                            Invoice invoice = (Invoice) invoiceTable.getValueAt(row, 0);
                            Object[] tableRow = {invoice.getInvoiceId(), item.getItemCode(), item.getDescription(), price, qty, amount};
                            dtm.addRow(tableRow);
                            qtyText.setEnabled(false);
                            qtyText.setText("");
                            descriptionText.setText("");
                            priceText.setText("");
                            qtyOnHandText.setText("");
                            itemCombo.requestFocus();
                            itemCombo.showPopup();
                        }
                    } else {
                        int res = JOptionPane.showConfirmDialog(UpdateInvoiceForm.this, "Item allready exists...Do you want to Update Qty?", "Confirm", JOptionPane.YES_NO_OPTION);
                        if (res == 0) {
                            int newQty = Integer.parseInt(qtyText.getText());
                            invoiceDetailTable.setValueAt(newQty, cell, 4);
                            String itemCode = (String) invoiceDetailTable.getValueAt(cell, 1);
                            double salesPrice = (double) invoiceDetailTable.getValueAt(cell, 3);
                            double amount = newQty * salesPrice;
                            invoiceDetailTable.setValueAt(amount, cell, 5);
                            //itemCombo.requestFocus();
                            itemCombo.showPopup();
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (selectedItem instanceof Item) {
                dtm = (DefaultTableModel) invoiceDetailTable.getModel();
                Item item = (Item) itemCombo.getSelectedItem();
                Item item1;
                try {
                    item1 = ItemController.getItemByItemCode(item.getItemCode());
                    boolean isExist = false;
                    cell = -1;
                    for (int i = 0; i < invoiceDetailTable.getRowCount(); i++) {
                        if (invoiceDetailTable.getValueAt(i, 1).equals(item.getItemCode())) {
                            isExist = true;
                            cell = i;
                            break;
                        }
                    }
                    if (!isExist) {
                        int a = Integer.parseInt(qtyText.getText());
                        double price = Double.parseDouble(priceText.getText());
                        int qty = Integer.parseInt(qtyText.getText());
                        double amount = (a * price);
                        if (qtyText.getText().isEmpty() || a <= 0) {
                            JOptionPane.showMessageDialog(UpdateInvoiceForm.this, "Please add item qty");
                        } else {
                            int row = invoiceTable.getSelectedRow();
                            Invoice invoice = (Invoice) invoiceTable.getValueAt(row, 0);
                            Object[] tableRow = {invoice.getInvoiceId(), item.getItemCode(), item.getDescription(), price, qty, amount};
                            dtm.addRow(tableRow);
                            qtyText.setText("");
                            descriptionText.setText("");
                            priceText.setText("");
                            qtyOnHandText.setText("");
                            itemCombo.requestFocus();
                            itemCombo.showPopup();
                        }
                    } else {
                        int res = JOptionPane.showConfirmDialog(UpdateInvoiceForm.this, "Item allready exists...Do you want to Update Qty?", "Confirm", JOptionPane.YES_NO_OPTION);
                        if (res == 0) {
                            int newQty = Integer.parseInt(qtyText.getText());
                            invoiceDetailTable.setValueAt(newQty, cell, 4);
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_addNewButtonActionPerformed
    
    private void customerTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerTextActionPerformed
    
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int row = invoiceDetailTable.getSelectedRow();
        if (invoiceDetailTable.isRowSelected(row)) {
            int res = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove row?", "Confirm", JOptionPane.YES_NO_OPTION);
            if (res == 0) {
                int r = invoiceDetailTable.getSelectedRow();
                dtm1 = (DefaultTableModel) invoiceDetailTable.getModel();
                dtm1.removeRow(r);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to remove !");
        }
    }//GEN-LAST:event_removeButtonActionPerformed
    
    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int row = invoiceDetailTable.getSelectedRow();
        int row1 = invoiceTable.getSelectedRow();
        if (invoiceDetailTable.isRowSelected(row) && invoiceTable.isRowSelected(row1)) {
            Invoice invoice = (Invoice) invoiceTable.getValueAt(row1, 0);
            String itemCode = (String) invoiceDetailTable.getValueAt(row, 1);
            String date = updateDateText.getText();
            int qty = (Integer) invoiceDetailTable.getValueAt(row, 4);
            Item item;
            try {
                item = ItemController.getItemByItemCode(itemCode);
                ReturnForm form = new ReturnForm(null, b, item, invoice, date, this, qty);
                form.setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to return Item!");
        }
        
    }//GEN-LAST:event_updateButtonActionPerformed
    
    private void endDateComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endDateComboActionPerformed
        checkProcess();
        Date date = endDateCombo.getDate();
        Date date1 = startDateCombo.getDate();
        String endDate = new SimpleDateFormat("YY=MM-dd").format(date);
        String startDate = new SimpleDateFormat("YY-MM-dd").format(date1);
        dateText.setText("");
        customerText.setText("");
        totalAmountText.setText("");
        dueAmountText.setText("");
        descriptionText.setText("");
        qtyText.setText("");
        priceText.setText("");
        qtyOnHandText.setText("");
        newTotAmountText.setText("");
        newDueAmountText.setText("");
        List<Invoice> invoiceList;
        try {
            invoiceList = InvoiceController.getInvoiceByDateRange(startDate, endDate);
            dtm = (DefaultTableModel) invoiceTable.getModel();
            dtm.setRowCount(0);
            dtm1 = (DefaultTableModel) invoiceDetailTable.getModel();
            dtm1.setRowCount(0);
            for (Invoice invoice : invoiceList) {
                Object[] row = {invoice};
                dtm.addRow(row);
            }
            invoiceTable.requestFocus();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_endDateComboActionPerformed
    
    private void startDateComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDateComboActionPerformed
        checkProcess();
        jPanel2.setBackground(Color.WHITE);
        jPanel3.setBackground(Color.lightGray);
        endDateCombo.setEnabled(true);
        endDateCombo.setDate(null);
        Date date = startDateCombo.getDate();
        String d = new SimpleDateFormat("YY-MM-dd").format(date);
        dateText.setText("");
        customerText.setText("");
        totalAmountText.setText("");
        dueAmountText.setText("");
        descriptionText.setText("");
        qtyText.setText("");
        priceText.setText("");
        qtyOnHandText.setText("");
        newTotAmountText.setText("");
        newDueAmountText.setText("");
        List<Invoice> invoiceList;
        try {
            invoiceList = InvoiceController.getInvoiceByStartDate(d);
            dtm = (DefaultTableModel) invoiceTable.getModel();
            dtm.setRowCount(0);
            dtm1 = (DefaultTableModel) invoiceDetailTable.getModel();
            dtm1.setRowCount(0);
            for (Invoice invoice : invoiceList) {
                Object[] row = {invoice};
                dtm.addRow(row);
            }
            invoiceTable.requestFocus();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startDateComboActionPerformed
    
    private void itemComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemComboActionPerformed
        if (b) {
            qtyText.setEnabled(true);
            Object selectedItem = itemCombo.getSelectedItem();
            if (selectedItem instanceof Book_Item) {
                Book_Item bookItem = (Book_Item) itemCombo.getSelectedItem();
                Item item;
                try {
                    item = ItemController.getItemByItemCode(bookItem.getItemCode());
                    descriptionText.setText(item.getDescription());
                    priceText.setText(Double.toString(item.getSalesPrice()));
                    qtyOnHandText.setText(Integer.toString(item.getQtyOnHand()));
                    qtyText.requestFocus();
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (selectedItem instanceof Item) {
                Item item = (Item) itemCombo.getSelectedItem();
                try {
                    item = ItemController.getItemByItemCode(item.getItemCode());
                    descriptionText.setText(item.getDescription());
                    priceText.setText(Double.toString(item.getSalesPrice()));
                    qtyOnHandText.setText(Integer.toString(item.getQtyOnHand()));
                    qtyText.requestFocus();
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_itemComboActionPerformed
    
    private void qtyOnHandTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyOnHandTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyOnHandTextActionPerformed
    
    private void qtyTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyTextKeyReleased
        check();
//        if (evt.getKeyCode() == KeyEvent.VK_F4) {
//            addNewButton.doClick();
//        }
        String text = qtyOnHandText.getText();
        int r = Integer.parseInt(text);
        String qty = qtyText.getText();
        if (!qty.isEmpty()) {
            boolean res = qty.matches("[0-9]+");
            if (res) {
                int q = Integer.parseInt(qtyText.getText());
                if (r >= q && q != 0) {
                    qtyText.setText(qty);
                } else {
                    qty = qty.substring(0, qty.length() - 1);
                    qtyText.setText(qty);
                }
            } else {
                qty = qty.substring(0, qty.length() - 1);
                qtyText.setText(qty);
            }
        }
    }//GEN-LAST:event_qtyTextKeyReleased
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        processButton.setEnabled(true);
        int count = invoiceDetailTable.getRowCount();
        double newTotAmount = 0;
        for (int i = 0; i < count; i++) {
            double amount = (Double) invoiceDetailTable.getValueAt(i, 5);
            newTotAmount = newTotAmount + amount;
        }
        newTotAmountText.setText(Double.toString(newTotAmount));
        double dueAmount = Double.parseDouble(dueAmountText.getText());
        double amount = newTotAmount - Double.parseDouble(totalAmountText.getText());
        double balance = Double.parseDouble(dueAmountText.getText());
        double newDueAmount = dueAmount + amount;
        newDueAmountText.setText(Double.toString(newDueAmount));
    }//GEN-LAST:event_okButtonActionPerformed
    
    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        int row = invoiceTable.getSelectedRow();
        Invoice invoice = (Invoice) invoiceTable.getValueAt(row, 0);
        try {
            int res = InvoiceDetailController.DeleteInvoiceDetail(invoice.getInvoiceId());
        } catch (SQLException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        int count = invoiceDetailTable.getRowCount();
        if (count > 0) {
            List<InvoiceDetails> list = new ArrayList<>();
            for (int i = 0; i < count; i++) {
                String invoiceId = (String) invoiceDetailTable.getValueAt(i, 0);
                String itemCode = (String) invoiceDetailTable.getValueAt(i, 1);
                String description = (String) invoiceDetailTable.getValueAt(i, 2);
                double price = (double) invoiceDetailTable.getValueAt(i, 3);
                int qty = (int) invoiceDetailTable.getValueAt(i, 4);
                double amount = (double) invoiceDetailTable.getValueAt(i, 5);
                InvoiceDetails detail = new InvoiceDetails(invoiceId, itemCode, description, price, qty, amount);
                list.add(detail);
            }
            int response;
            try {
                response = InvoiceDetailController.addInvoiceDetail(list);
                if (response > 0) {
                    JOptionPane.showMessageDialog(null, "Invoice updated Successfully!");
                }
            } catch (SQLException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            String newTotAmount = newTotAmountText.getText();
            String newDueAmount = newDueAmountText.getText();
            double newAmount = Double.parseDouble(newTotAmount);
            double dueAmount = Double.parseDouble(newDueAmount);
            try {
                int res1 = InvoiceController.updateInvoice(invoice.getInvoiceId(), newAmount, dueAmount);
            } catch (SQLException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_processButtonActionPerformed
    
    private void customerComboMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerComboMousePressed
        Customer customer = (Customer) customerCombo.getSelectedItem();
        dateText.setText("");
        customerText.setText("");
        totalAmountText.setText("");
        dueAmountText.setText("");
        descriptionText.setText("");
        qtyText.setText("");
        priceText.setText("");
        qtyOnHandText.setText("");
        newTotAmountText.setText("");
        newDueAmountText.setText("");
        dtm = (DefaultTableModel) invoiceTable.getModel();
        dtm.setRowCount(0);
        dtm1 = (DefaultTableModel) invoiceDetailTable.getModel();
        dtm1.setRowCount(0);
        List<Invoice> invoiceIdList;
        try {
            invoiceIdList = InvoiceController.getInvoiceByCustomer(customer.getCustId());
            for (Invoice invoice : invoiceIdList) {
                Object[] rowData = {invoice};
                dtm.addRow(rowData);
            }
            invoiceTable.requestFocus();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_customerComboMousePressed
    
    private void invoiceTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoiceTableMousePressed
        checkProcess();
        int row = invoiceTable.getSelectedRow();
        dtm1 = (DefaultTableModel) invoiceDetailTable.getModel();
        dtm1.setRowCount(0);
        Invoice invoice = (Invoice) invoiceTable.getValueAt(row, 0);
        dateText.setText(invoice.getInv_date());
        Customer customer;
        try {
            customer = CustomerController.getCustomerByCustId(invoice.getCustId());
            customerText.setText(customer.getCustId() + " - " + customer.getCustName());
            totalAmountText.setText(Double.toString(invoice.getTot_amount()));
            dueAmountText.setText(Double.toString(invoice.getBalance()));
        } catch (SQLException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        List<InvoiceDetails> invoiceDetails;
        try {
            invoiceDetails = InvoiceDetailController.getInvoiceDetails(invoice.getInvoiceId());
            for (InvoiceDetails detail : invoiceDetails) {
                Object[] tableRow = {detail.getInvoiceId(), detail.getItemCode(), detail.getDescription(), detail.getSalesPrice(), detail.getQty(), detail.getItemAmount()};
                dtm1.addRow(tableRow);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_invoiceTableMousePressed
    
    private void qtyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyTextActionPerformed
        addNewButton.doClick();
    }//GEN-LAST:event_qtyTextActionPerformed
    
    private void descriptionTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descriptionTextKeyReleased
        check();
    }//GEN-LAST:event_descriptionTextKeyReleased
    
    private void priceTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTextKeyReleased
        check();
    }//GEN-LAST:event_priceTextKeyReleased
    
    private void qtyOnHandTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyOnHandTextKeyReleased
        check();
    }//GEN-LAST:event_qtyOnHandTextKeyReleased
    
    private void customerComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerComboFocusGained
        startDateCombo.setDate(null);
        jPanel3.setBackground(Color.WHITE);
        endDateCombo.setDate(null);
        jPanel2.setBackground(Color.lightGray);
    }//GEN-LAST:event_customerComboFocusGained
    
    private void newTotAmountTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTotAmountTextActionPerformed
        
    }//GEN-LAST:event_newTotAmountTextActionPerformed
    
    private void newTotAmountTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newTotAmountTextKeyReleased
        
    }//GEN-LAST:event_newTotAmountTextKeyReleased
    
    private void newDueAmountTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDueAmountTextActionPerformed
        
    }//GEN-LAST:event_newDueAmountTextActionPerformed
    
    private void newDueAmountTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newDueAmountTextKeyReleased
        
    }//GEN-LAST:event_newDueAmountTextKeyReleased
    
    private void startDateComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_startDateComboFocusGained
        
    }//GEN-LAST:event_startDateComboFocusGained
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewButton;
    private javax.swing.JComboBox customerCombo;
    private javax.swing.JTextField customerText;
    private javax.swing.JTextField dateText;
    private javax.swing.JTextField descriptionText;
    private javax.swing.JTextField dueAmountText;
    private org.jdesktop.swingx.JXDatePicker endDateCombo;
    private javax.swing.JTable invoiceDetailTable;
    private javax.swing.JTable invoiceTable;
    private javax.swing.JComboBox itemCombo;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField newDueAmountText;
    private javax.swing.JTextField newTotAmountText;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField priceText;
    private javax.swing.JButton processButton;
    private javax.swing.JTextField qtyOnHandText;
    private javax.swing.JTextField qtyText;
    private javax.swing.JButton removeButton;
    private org.jdesktop.swingx.JXDatePicker startDateCombo;
    private javax.swing.JTextField totalAmountText;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField updateDateText;
    // End of variables declaration//GEN-END:variables

    private void fillCustomerCombo() {
        List<Customer> customerList;
        try {
            customerList = CustomerController.getAllCustomers();
            b = false;
            customerCombo.removeAllItems();
            customerCombo.addItem("<select a Customer>");
            for (Customer customer : customerList) {
                customerCombo.addItem(customer);
            }
            b = true;
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void fillItemCombo() throws SQLException, ClassNotFoundException {
        List<Book_Item> itemBookList = BookController.getAllItems();
        List<Item> itemList = ItemController.getAllItemsNotBooks();
        b = false;
        itemCombo.removeAllItems();
        for (Book_Item bookList : itemBookList) {
            itemCombo.addItem(bookList);
        }
        for (Item item : itemList) {
            itemCombo.addItem(item);
        }
        b = true;
    }
    
    public void updateQty(int qty) throws SQLException {
        int row = invoiceDetailTable.getSelectedRow();
        invoiceDetailTable.setValueAt(qty, row, 4);
        String itemCode = (String) invoiceDetailTable.getValueAt(row, 1);
        Item item;
        try {
            item = ItemController.getItemByItemCode(itemCode);
            double price = item.getSalesPrice();
            double amount = price * qty;
            invoiceDetailTable.setValueAt(amount, row, 5);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateInvoiceForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void check() {
        boolean bool = descriptionText.getText().isEmpty() || priceText.getText().isEmpty() || qtyOnHandText.getText().isEmpty() || qtyText.getText().isEmpty();
        if (bool == false) {
            addNewButton.setEnabled(true);
        } else {
            addNewButton.setEnabled(false);
        }
    }
    
    private void checkProcess() {
        // boolean bool = dateText.getText().isEmpty() || customerText.getText().isEmpty() || totalAmountText.getText().isEmpty() || dueAmountText.getText().isEmpty();
        int row = invoiceTable.getSelectedRow();        
        if (invoiceTable.isRowSelected(row)) {
            okButton.setEnabled(true);
        } else {
            okButton.setEnabled(false);
        }
    }
}
