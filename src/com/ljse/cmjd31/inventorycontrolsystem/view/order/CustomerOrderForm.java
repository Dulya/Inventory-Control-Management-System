/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ljse.cmjd31.inventorycontrolsystem.view.order;

import com.ijse.cmjd31.inventorycontrolsystem.controller.BookController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.CustomerController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.InvoiceController;
import com.ijse.cmjd31.inventorycontrolsystem.controller.ItemController;
import com.ijse.cmjd31.inventorycontrolsystem.db.DBConnection;
import com.ijse.cmjd31.inventorycontrolsystem.model.Book;
import com.ijse.cmjd31.inventorycontrolsystem.model.Book_Item;
import com.ijse.cmjd31.inventorycontrolsystem.model.Customer;
import com.ijse.cmjd31.inventorycontrolsystem.model.Invoice;
import com.ijse.cmjd31.inventorycontrolsystem.model.InvoiceDetails;
import com.ijse.cmjd31.inventorycontrolsystem.model.Item;
import com.ijse.cmjd31.inventorycontrolsystem.other.IdGenerator;
import com.ijse.cmjd31.inventorycontrolsystem.view.customer.AddCustomerForm;
import com.ijse.cmjd31.inventorycontrolsystem.view.customer.ManageCustomerForm;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author 1
 */
public class CustomerOrderForm extends javax.swing.JPanel {

    /**
     * Creates new form OrderCustomer
     */
    private boolean b;
    private DefaultTableModel dtm;
    private int cell;

    public CustomerOrderForm() {
        initComponents();
        fillCustomerCombo();
        try {
            fillItemCombo();
            String nextId = IdGenerator.getNextId("Invoice", "idInvoice", "IN");
            invoiceText.setText(nextId);
            invoiceText.requestFocus();
            //  addButton.setMnemonic(KeyEvent.VK_A);
            processButton.setMnemonic(KeyEvent.VK_F1);
            // itemCombo.setKeySelectionManager(null);
            removeButton.getInputMap().put(KeyStroke.getKeyStroke("DELETE"), "pressed");
            removeButton.getActionMap().put("pressed", new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    removeButton.doClick();
                }
            });
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        SimpleDateFormat sdf = new SimpleDateFormat("YYYY-MM-dd");
        String date = sdf.format(new Date());
        dateText.setText(date);
//        SimpleDateFormat sdf1 = new SimpleDateFormat("HH:mm:ss");
//        String time = sdf1.format(new Date());
//        timeText.setText(time);
        customerCombo.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        priceText = new javax.swing.JTextField();
        descriptionText = new javax.swing.JTextField();
        qtyOnHandText = new javax.swing.JTextField();
        itemCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        qtyText = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        invoiceText = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        timeText = new javax.swing.JTextField();
        dateText = new javax.swing.JTextField();
        customerCombo = new javax.swing.JComboBox();
        addCustomerButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        totalAmountText = new javax.swing.JTextField();
        removeButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        processButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1220, 590));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setPreferredSize(new java.awt.Dimension(1220, 900));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        priceText.setEditable(false);
        priceText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        descriptionText.setEditable(false);
        descriptionText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        descriptionText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionTextActionPerformed(evt);
            }
        });

        qtyOnHandText.setEditable(false);
        qtyOnHandText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        qtyOnHandText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyOnHandTextActionPerformed(evt);
            }
        });

        itemCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        itemCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        itemCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemComboMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                itemComboMousePressed(evt);
            }
        });
        itemCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemComboActionPerformed(evt);
            }
        });
        itemCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                itemComboFocusGained(evt);
            }
        });
        itemCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemComboKeyPressed(evt);
            }
        });

        jLabel3.setText("Item Code");

        jLabel6.setText("QtyOnHand");

        jLabel5.setText("Price");

        jLabel4.setText("Description");

        jLabel16.setText("Qty");

        qtyText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        qtyText.setEnabled(false);
        qtyText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyTextActionPerformed(evt);
            }
        });
        qtyText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qtyTextKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(qtyOnHandText, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(qtyText, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(descriptionText, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(itemCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(itemCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(descriptionText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(qtyOnHandText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qtyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))))
                .addGap(18, 18, 18))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 51), 1, true));

        jLabel8.setText("Invoice No");

        jLabel11.setText("Date");

        jLabel12.setBackground(new java.awt.Color(0, 204, 153));
        jLabel12.setText("Time");

        invoiceText.setEditable(false);
        invoiceText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        invoiceText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceTextActionPerformed(evt);
            }
        });
        invoiceText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                invoiceTextFocusGained(evt);
            }
        });

        jLabel15.setText("Bill To :");

        timeText.setEditable(false);
        timeText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        timeText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeTextActionPerformed(evt);
            }
        });

        dateText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTextActionPerformed(evt);
            }
        });

        customerCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        customerCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        customerCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerComboActionPerformed(evt);
            }
        });
        customerCombo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                customerComboFocusGained(evt);
            }
        });
        customerCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerComboKeyPressed(evt);
            }
        });

        addCustomerButton.setForeground(new java.awt.Color(0, 153, 153));
        addCustomerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/user-new-2.png"))); // NOI18N
        addCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(invoiceText))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timeText))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(addCustomerButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(invoiceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addCustomerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(customerCombo))
                .addGap(18, 18, 18))
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sales Details", 0, 0, new java.awt.Font("Baskerville Old Face", 1, 18))); // NOI18N

        jScrollPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jScrollPane1KeyReleased(evt);
            }
        });

        itemTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice No", "Item Code", "Description", "Unit Price", "Qty", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.setSelectionBackground(new java.awt.Color(204, 204, 255));
        itemTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        itemTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                itemTableFocusGained(evt);
            }
        });
        itemTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(itemTable);

        jLabel10.setFont(new java.awt.Font("Baskerville Old Face", 1, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Total Amount");

        totalAmountText.setEditable(false);
        totalAmountText.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        totalAmountText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalAmountText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalAmountTextActionPerformed(evt);
            }
        });
        totalAmountText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                totalAmountTextKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(49, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(totalAmountText, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 679, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 40, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addGap(26, 26, 26)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalAmountText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/edit-clear-2.png"))); // NOI18N
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/edit-add.png"))); // NOI18N
        addButton.setMnemonic('Q');
        addButton.setText("Add to Table");
        addButton.setEnabled(false);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        addButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addButtonKeyPressed(evt);
            }
        });

        processButton.setBackground(new java.awt.Color(204, 204, 204));
        processButton.setText("Process");
        processButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processButtonActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 51, 102));

        jLabel1.setFont(new java.awt.Font("Andalus", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("New Invoice Form");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1067, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 7, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(4, 4, 4)))
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addGap(64, 64, 64)
                        .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(150, 150, 150))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(removeButton)
                            .addComponent(addButton))
                        .addGap(40, 40, 40))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(processButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 1193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void descriptionTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descriptionTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descriptionTextActionPerformed

    private void qtyOnHandTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyOnHandTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyOnHandTextActionPerformed

    private void itemComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemComboActionPerformed
        if (b) {
            qtyText.setEnabled(true);
            Object selectedItem = itemCombo.getSelectedItem();
            if (selectedItem instanceof Book_Item) {
                Book_Item bookItem = (Book_Item) itemCombo.getSelectedItem();
                Item item;
                try {
                    item = ItemController.getItemByItemCode(bookItem.getItemCode());
                    Book book = BookController.getBookByItemCode(item.getItemCode());
                    descriptionText.setText("B" + " - " + book.getBookTitle());
                    priceText.setText(Double.toString(item.getSalesPrice()));
                    qtyOnHandText.setText(Integer.toString(item.getQtyOnHand()));
                    qtyText.requestFocus();
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (selectedItem instanceof Item) {
                Item item = (Item) itemCombo.getSelectedItem();
                try {
                    item = ItemController.getItemByItemCode(item.getItemCode());
                    descriptionText.setText(item.getDescription());
                    priceText.setText(Double.toString(item.getSalesPrice()));
                    qtyOnHandText.setText(Integer.toString(item.getQtyOnHand()));
                    qtyText.requestFocus();
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

    }//GEN-LAST:event_itemComboActionPerformed

    private void itemComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemComboKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            qtyText.requestFocus();
            qtyText.setEnabled(true);
        }
    }//GEN-LAST:event_itemComboKeyPressed

    private void qtyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyTextActionPerformed
        if (qtyText.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter item Qty!");
        } else {
            addButton.requestFocus();
            addButton.doClick();
        }
    }//GEN-LAST:event_qtyTextActionPerformed

    private void qtyTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyTextKeyReleased
        check();
        String text = qtyOnHandText.getText();
        int r = Integer.parseInt(text);
        String qty = qtyText.getText();
        if (!qty.isEmpty()) {
            boolean res = qty.matches("[0-9]+");
            if (res) {
                int q = Integer.parseInt(qtyText.getText());
                if (r >= q && q != 0) {
                    qtyText.setText(qty);
                } else {
                    qty = qty.substring(0, qty.length() - 1);
                    qtyText.setText(qty);
                }
            } else {
                qty = qty.substring(0, qty.length() - 1);
                qtyText.setText(qty);
            }
        }
    }//GEN-LAST:event_qtyTextKeyReleased

    private void invoiceTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_invoiceTextActionPerformed

    private void invoiceTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_invoiceTextFocusGained
    }//GEN-LAST:event_invoiceTextFocusGained

    private void timeTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timeTextActionPerformed

    private void dateTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateTextActionPerformed

    private void customerComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerComboFocusGained
        customerCombo.showPopup();
    }//GEN-LAST:event_customerComboFocusGained

    private void customerComboKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerComboKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            itemCombo.requestFocus();
            itemCombo.showPopup();
        } else if (evt.getKeyCode() != KeyEvent.VK_F1) {
            customerCombo.showPopup();
        }
    }//GEN-LAST:event_customerComboKeyPressed

    private void addCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomerButtonActionPerformed
        AddCustomerForm frame = new AddCustomerForm();
        frame.setVisible(true);
        JDialog customerDialog = new JDialog();
        customerDialog.setSize(830, 600);
        customerDialog.setLocationRelativeTo(null);
        customerDialog.setContentPane(frame);
        customerDialog.setVisible(true);
    }//GEN-LAST:event_addCustomerButtonActionPerformed

    private void itemTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_itemTableFocusGained
        int r = itemTable.getSelectedRow();
        removeButton.requestFocus();
    }//GEN-LAST:event_itemTableFocusGained

    private void itemTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemTableKeyPressed
        // TODO add your handling code here:
        System.out.println("sdkjfhlaks");
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            removeButton.doClick();
        }
    }//GEN-LAST:event_itemTableKeyPressed

    private void itemTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            removeButton.doClick();
        }
        System.out.println("sdkjfhlaks");
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            removeButton.doClick();
        }
    }//GEN-LAST:event_itemTableKeyReleased

    private void jScrollPane1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jScrollPane1KeyReleased
    }//GEN-LAST:event_jScrollPane1KeyReleased

    private void totalAmountTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalAmountTextActionPerformed
    }//GEN-LAST:event_totalAmountTextActionPerformed

    private void processButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processButtonActionPerformed
        int count1 = itemTable.getRowCount();
        int index = customerCombo.getSelectedIndex();
        if (count1 == 0) {
            JOptionPane.showMessageDialog(null, "Please add Items to proceed with new Invoice!");
        } else if (count1 > 0 && index > 0) {
            SimpleDateFormat sdf1 = new SimpleDateFormat("HH:mm:ss");
            String time = sdf1.format(new Date());
            timeText.setText(time);
            int count = itemTable.getRowCount();
            if (count > 0) {
                List<InvoiceDetails> list = new ArrayList<>();
                for (int i = 0; i < count; i++) {
                    String invoiceId = (String) itemTable.getValueAt(i, 0);
                    String itemCode = (String) itemTable.getValueAt(i, 1);
                    String description = (String) itemTable.getValueAt(i, 2);
                    double price = (double) itemTable.getValueAt(i, 3);
                    int qty = (int) itemTable.getValueAt(i, 4);
                    double amount = (double) itemTable.getValueAt(i, 5);
                    InvoiceDetails detail = new InvoiceDetails(invoiceId, itemCode, description, price, qty, amount);
                    list.add(detail);
                }
                Customer customer = (Customer) customerCombo.getSelectedItem();
                String date = dateText.getText();
                String time1 = timeText.getText();
                Invoice invoice = new Invoice(invoiceText.getText(), date, time1, Double.parseDouble(totalAmountText.getText()), customer.getCustId(), list, Double.parseDouble(totalAmountText.getText()));
                int res;
                try {
                    res = InvoiceController.addInvoice(invoice);
                    if (res > 0) {
                        JOptionPane.showMessageDialog(null, "Invoice added Successfully!");
                        check();
        dtm = (DefaultTableModel) itemTable.getModel();
        dtm.setRowCount(0);
        descriptionText.setText("");
        priceText.setText("");
        qtyText.setText("");
        qtyOnHandText.setText("");
        timeText.setText("");
        totalAmountText.setText("");
        customerCombo.requestFocus();
        String nextId;
        try {
            nextId = IdGenerator.getNextId("Invoice", "idInvoice", "IN");
            invoiceText.setText(nextId);
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
                        try {
                            JasperReport jr = JasperCompileManager.compileReport("./jasperreport/CustomerInvoice.jrxml");
                            Map<String, Object> params = new HashMap<>();
                            Customer customer1 = (Customer) customerCombo.getSelectedItem();
                            params.put("INVOICE_ID", invoiceText.getText());
                            params.put("CUSTOMER_NAME", customer1.getCustName());
                            JasperPrint jp;
                            try {
                                jp = JasperFillManager.fillReport(jr, params, DBConnection.getInstance().getConnection());
                                JasperViewer.viewReport(jp, false);
                            } catch (SQLException ex) {
                                Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (ClassNotFoundException ex) {
                                Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } catch (JRException ex) {
                            Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else if (count1 > 0 && index == 0) {
            JOptionPane.showMessageDialog(null, "Please select a Customer !");
        }
    }//GEN-LAST:event_processButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int count = itemTable.getRowCount();
        if (count > 0) {
            int selectedRow = itemTable.getSelectedRow();
            boolean b = itemTable.isRowSelected(selectedRow);
            if (b == true) {
                int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to remove row?", "Confirm", JOptionPane.YES_NO_OPTION);
                if (response == 0) {
                    dtm = (DefaultTableModel) itemTable.getModel();
                    dtm.removeRow(selectedRow);
                }
            } else {
                JOptionPane.showMessageDialog(itemCombo, "Please select a row to remove!");
            }
        } else {
            JOptionPane.showMessageDialog(itemCombo, "Item Table is Empty..Please add items to remove.");
        }

    }//GEN-LAST:event_removeButtonActionPerformed
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (b) {
            Object selectedItem = itemCombo.getSelectedItem();
            if (selectedItem instanceof Book_Item) {
                dtm = (DefaultTableModel) itemTable.getModel();
                Book_Item bookItem = (Book_Item) itemCombo.getSelectedItem();
                Item item;
                try {
                    item = ItemController.getItemByItemCode(bookItem.getItemCode());
                    Book book = BookController.getBookByItemCode(item.getItemCode());
                    boolean isExist = false;
                    cell = -1;
                    for (int i = 0; i < itemTable.getRowCount(); i++) {
                        if (itemTable.getValueAt(i, 1).equals(item.getItemCode())) {
                            isExist = true;
                            cell = i;
                            break;
                        }
                    }
                    if (!isExist) {
                        int a = Integer.parseInt(qtyText.getText());
                        double price = Double.parseDouble(priceText.getText());
                        int qty = Integer.parseInt(qtyText.getText());
                        double amount = (a * price);
                        if (qtyText.getText().isEmpty() || a <= 0) {
                            JOptionPane.showMessageDialog(CustomerOrderForm.this, "Please add item qty");
                        } else {
                            Object[] row = {invoiceText.getText(), item.getItemCode(), "B" + " - " + book.getBookTitle(), price, qty, amount};
                            dtm.addRow(row);
                            qtyText.setEnabled(false);
                            qtyText.setText("");
                            descriptionText.setText("");
                            priceText.setText("");
                            qtyOnHandText.setText("");
                            itemCombo.requestFocus();
                            itemCombo.showPopup();
                            int count = itemTable.getRowCount();
                            double totalAmount = 0;
                            for (int i = 0; i < count; i++) {
                                double rowAmount = (double) itemTable.getValueAt(i, 5);
                                totalAmount = totalAmount + rowAmount;
                                totalAmountText.setText(Double.toString(totalAmount));
                            }
                        }
                    } else {
                        int res = JOptionPane.showConfirmDialog(CustomerOrderForm.this, "Item allready exists...Do you want to Update Qty?", "Confirm", JOptionPane.YES_NO_OPTION);
                        if (res == 0) {
                            int newQty = Integer.parseInt(qtyText.getText());
                            itemTable.setValueAt(newQty, cell, 4);
                            //itemCombo.requestFocus();
                            itemCombo.showPopup();
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrderForm.class
                            .getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrderForm.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            } else if (selectedItem instanceof Item) {
                dtm = (DefaultTableModel) itemTable.getModel();
                Item item = (Item) itemCombo.getSelectedItem();
                Item item1;
                try {
                    item1 = ItemController.getItemByItemCode(item.getItemCode());
                    boolean isExist = false;
                    cell = -1;
                    for (int i = 0; i < itemTable.getRowCount(); i++) {
                        if (itemTable.getValueAt(i, 1).equals(item.getItemCode())) {
                            isExist = true;
                            cell = i;
                            break;
                        }
                    }
                    if (!isExist) {
                        int a = Integer.parseInt(qtyText.getText());
                        double price = Double.parseDouble(priceText.getText());
                        int qty = Integer.parseInt(qtyText.getText());
                        double amount = (a * price);
                        if (qtyText.getText().isEmpty() || a <= 0) {
                            JOptionPane.showMessageDialog(CustomerOrderForm.this, "Please add item qty");
                        } else {
                            Object[] row = {invoiceText.getText(), item.getItemCode(), item.getDescription(), price, qty, amount};
                            dtm.addRow(row);
                            qtyText.setText("");
                            descriptionText.setText("");
                            priceText.setText("");
                            qtyOnHandText.setText("");
                            itemCombo.requestFocus();
                            itemCombo.showPopup();
                            int count = itemTable.getRowCount();
                            double totalAmount = 0;
                            for (int i = 0; i < count; i++) {
                                double rowAmount = (double) itemTable.getValueAt(i, 5);
                                totalAmount = totalAmount + rowAmount;
                                totalAmountText.setText(Double.toString(totalAmount));
                            }
                        }
                    } else {
                        int res = JOptionPane.showConfirmDialog(CustomerOrderForm.this, "Item allready exists...Do you want to Update Qty?", "Confirm", JOptionPane.YES_NO_OPTION);
                        if (res == 0) {
                            int newQty = Integer.parseInt(qtyText.getText());
                            itemTable.setValueAt(newQty, cell, 4);
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(CustomerOrderForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(CustomerOrderForm.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void addButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_F1) {
            addButton.doClick();
        }
    }//GEN-LAST:event_addButtonKeyPressed

    private void itemComboMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemComboMousePressed
        qtyText.setEnabled(true);
        qtyText.requestFocus();
    }//GEN-LAST:event_itemComboMousePressed

    private void itemComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemComboMouseClicked
        qtyText.requestFocus();
    }//GEN-LAST:event_itemComboMouseClicked

    private void totalAmountTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_totalAmountTextKeyReleased
    }//GEN-LAST:event_totalAmountTextKeyReleased

    private void itemComboFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_itemComboFocusGained
        check();
    }//GEN-LAST:event_itemComboFocusGained

    private void customerComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerComboActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addCustomerButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox customerCombo;
    private javax.swing.JTextField dateText;
    private javax.swing.JTextField descriptionText;
    private javax.swing.JTextField invoiceText;
    private javax.swing.JComboBox itemCombo;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField priceText;
    private javax.swing.JButton processButton;
    private javax.swing.JTextField qtyOnHandText;
    private javax.swing.JTextField qtyText;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField timeText;
    private javax.swing.JTextField totalAmountText;
    // End of variables declaration//GEN-END:variables

    private void fillCustomerCombo() {
        List<Customer> customerList;
        try {
            customerList = CustomerController.getAllCustomers();
            b = false;
            customerCombo.removeAllItems();
            customerCombo.addItem("<select a Customer>");
            for (Customer customer : customerList) {
                customerCombo.addItem(customer);
            }
            b = true;
        } catch (SQLException ex) {
            Logger.getLogger(CustomerOrderForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CustomerOrderForm.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillItemCombo() throws SQLException, ClassNotFoundException {
        List<Book_Item> itemBookList = BookController.getAllItems();
        List<Item> itemList = ItemController.getAllItemsNotBooks();
        b = false;
        itemCombo.removeAllItems();
        for (Book_Item bookList : itemBookList) {
            itemCombo.addItem(bookList);
        }
        for (Item item : itemList) {
            itemCombo.addItem(item);
        }
        b = true;
    }

    private void check() {
        boolean b = descriptionText.getText().isEmpty() || priceText.getText().isEmpty() || qtyText.getText().isEmpty() || qtyOnHandText.getText().isEmpty();
        if (!b) {
            addButton.setEnabled(true);

        } else {
            addButton.setEnabled(false);
        }
    }
}
